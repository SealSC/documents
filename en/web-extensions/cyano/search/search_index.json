{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This document is for sealsc-web-extension-cyano project. sealsc-web-extension-cyano is a wrapper of Cyano web extension. This wrapper is conform Seal SC web extension protocol .","title":"Getting started"},{"location":"page/apiRef/constants/","text":"originalToken ONT new OriginalAssets ('ONT') ONG new OriginalAssets ('ONG')","title":"Constants"},{"location":"page/apiRef/constants/#originaltoken","text":"","title":"originalToken"},{"location":"page/apiRef/constants/#ont","text":"new OriginalAssets ('ONT')","title":"ONT"},{"location":"page/apiRef/constants/#ong","text":"new OriginalAssets ('ONG')","title":"ONG"},{"location":"page/apiRef/extensionActions/","text":"Extends ExtensionActions Constructor constructor(extension) Parameter extension - CyanoExtension Property extension Type: CyanoWrapper Description: Cyano wrapper instance passed by constructor. Methods loadContract async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Unused : address - String : Smart contract Address. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if Status is SUCCESS . transfer async transfer(to, amount, memo, extra) Description Transfer ONT or ONG. Parameters : to - String : Transfer target address. amount - Number : How many ONT or ONG will be transferred. memo - Unused extra - OriginalAssets : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS . transferToken async transferToken(wrapper, to, amount, extra) Description Transfercontract based token, such as NEP 4 token. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number How many tokens will be transferred. extra - Unused Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS . getAccount async getAccount() Description Get selected account in Cyano. Returns : Promise Result String , Status : Account string will be set into the data field of Result if Status is SUCCESS .","title":"CyanoActions"},{"location":"page/apiRef/extensionActions/#extends","text":"ExtensionActions","title":"Extends"},{"location":"page/apiRef/extensionActions/#constructor","text":"constructor(extension) Parameter extension - CyanoExtension","title":"Constructor"},{"location":"page/apiRef/extensionActions/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionActions/#extension","text":"Type: CyanoWrapper Description: Cyano wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionActions/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionActions/#loadcontract","text":"async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Unused : address - String : Smart contract Address. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if Status is SUCCESS .","title":"loadContract"},{"location":"page/apiRef/extensionActions/#transfer","text":"async transfer(to, amount, memo, extra) Description Transfer ONT or ONG. Parameters : to - String : Transfer target address. amount - Number : How many ONT or ONG will be transferred. memo - Unused extra - OriginalAssets : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS .","title":"transfer"},{"location":"page/apiRef/extensionActions/#transfertoken","text":"async transferToken(wrapper, to, amount, extra) Description Transfercontract based token, such as NEP 4 token. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number How many tokens will be transferred. extra - Unused Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS .","title":"transferToken"},{"location":"page/apiRef/extensionActions/#getaccount","text":"async getAccount() Description Get selected account in Cyano. Returns : Promise Result String , Status : Account string will be set into the data field of Result if Status is SUCCESS .","title":"getAccount"},{"location":"page/apiRef/extensionChecker/","text":"Extends ExtensionActions Constructor constructor(extension) Parameter extension - CyanoExtension Property extension Type: CyanoExtension Description: Cyano wrapper instance passed by constructor. Methods installed async installed() Description Check if Cyano web extension was installed. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if Cyano installed. isMainnet async isMainnet() Description Check if Cyano is connected to the mainnet. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if Cyano connected to Ethereum mainnet. isLogin async isLogin() Description Check if Cyano is logged in. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if Cyano was login.","title":"CyanoChecker"},{"location":"page/apiRef/extensionChecker/#extends","text":"ExtensionActions","title":"Extends"},{"location":"page/apiRef/extensionChecker/#constructor","text":"constructor(extension) Parameter extension - CyanoExtension","title":"Constructor"},{"location":"page/apiRef/extensionChecker/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionChecker/#extension","text":"Type: CyanoExtension Description: Cyano wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionChecker/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionChecker/#installed","text":"async installed() Description Check if Cyano web extension was installed. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if Cyano installed.","title":"installed"},{"location":"page/apiRef/extensionChecker/#ismainnet","text":"async isMainnet() Description Check if Cyano is connected to the mainnet. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if Cyano connected to Ethereum mainnet.","title":"isMainnet"},{"location":"page/apiRef/extensionChecker/#islogin","text":"async isLogin() Description Check if Cyano is logged in. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if Cyano was login.","title":"isLogin"},{"location":"page/apiRef/extensionContractCaller/","text":"Extends ExtensionContractCaller Constructor constructor(extension) Parameter extension - CyanoExtension Property extension Type: CyanoExtension Description: Cyano wrapper instance passed by constructor. Methods onChainCall async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method. This method may change the mart contract state. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Array : Data for the contract method's parameter. amount - Unused extra - Unused Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if contract called successfully. offChainCall async offChainCall(wrapper, method, param) Description Call smart contract and get the output or result whithout change the state of it. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Array : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if contract called successfully.","title":"CyanoContractCaller"},{"location":"page/apiRef/extensionContractCaller/#extends","text":"ExtensionContractCaller","title":"Extends"},{"location":"page/apiRef/extensionContractCaller/#constructor","text":"constructor(extension) Parameter extension - CyanoExtension","title":"Constructor"},{"location":"page/apiRef/extensionContractCaller/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionContractCaller/#extension","text":"Type: CyanoExtension Description: Cyano wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionContractCaller/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionContractCaller/#onchaincall","text":"async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method. This method may change the mart contract state. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Array : Data for the contract method's parameter. amount - Unused extra - Unused Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if contract called successfully.","title":"onChainCall"},{"location":"page/apiRef/extensionContractCaller/#offchaincall","text":"async offChainCall(wrapper, method, param) Description Call smart contract and get the output or result whithout change the state of it. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Array : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if contract called successfully.","title":"offChainCall"},{"location":"page/apiRef/extensionWrapper/","text":"Extends ExtensionWrapper Constructor constructor() Property checker Type: CyanoChecker Description: Provide some basic check function such as isLogin, isMainnet etc. contractCaller Type: CyanoContractCaller Description: Provide smart contract invoke and read capability. actions Type: CyanoActions Description: Provide sets of functions to access Ontology, such as transfer, getAccount. webjsInstance Type: OntologyDApiWrapper Description: A OntologyDApiWrapper instance. Methods load async load() Description Load OntologyDApiWrapper instance to webjsInstance property. Returns : Promise Result OntologyDApiWrapper , Status : A OntologyDApiWrapper instance will be set into the data field of Result if success.","title":"CyanoExtension"},{"location":"page/apiRef/extensionWrapper/#extends","text":"ExtensionWrapper","title":"Extends"},{"location":"page/apiRef/extensionWrapper/#constructor","text":"constructor()","title":"Constructor"},{"location":"page/apiRef/extensionWrapper/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionWrapper/#checker","text":"Type: CyanoChecker Description: Provide some basic check function such as isLogin, isMainnet etc.","title":"checker"},{"location":"page/apiRef/extensionWrapper/#contractcaller","text":"Type: CyanoContractCaller Description: Provide smart contract invoke and read capability.","title":"contractCaller"},{"location":"page/apiRef/extensionWrapper/#actions","text":"Type: CyanoActions Description: Provide sets of functions to access Ontology, such as transfer, getAccount.","title":"actions"},{"location":"page/apiRef/extensionWrapper/#webjsinstance","text":"Type: OntologyDApiWrapper Description: A OntologyDApiWrapper instance.","title":"webjsInstance"},{"location":"page/apiRef/extensionWrapper/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionWrapper/#load","text":"async load() Description Load OntologyDApiWrapper instance to webjsInstance property. Returns : Promise Result OntologyDApiWrapper , Status : A OntologyDApiWrapper instance will be set into the data field of Result if success.","title":"load"},{"location":"page/apiRef/ontologyDApiWrapper/","text":"Constructor constructor(client) Parameters client - ontologyDApi.client : Ontology DApi client. Property provider Type: ontologyDApi.client.api.provider asset Type: ontologyDApi.client.api.asset network Type: ontologyDApi.client.api.network smartContract Type: ontologyDApi.client.api.smartContract utils Type: ontologyDApi.client.api.utils","title":"OntologyDApiWrapper"},{"location":"page/apiRef/ontologyDApiWrapper/#constructor","text":"constructor(client) Parameters client - ontologyDApi.client : Ontology DApi client.","title":"Constructor"},{"location":"page/apiRef/ontologyDApiWrapper/#property","text":"","title":"Property"},{"location":"page/apiRef/ontologyDApiWrapper/#provider","text":"Type: ontologyDApi.client.api.provider","title":"provider"},{"location":"page/apiRef/ontologyDApiWrapper/#asset","text":"Type: ontologyDApi.client.api.asset","title":"asset"},{"location":"page/apiRef/ontologyDApiWrapper/#network","text":"Type: ontologyDApi.client.api.network","title":"network"},{"location":"page/apiRef/ontologyDApiWrapper/#smartcontract","text":"Type: ontologyDApi.client.api.smartContract","title":"smartContract"},{"location":"page/apiRef/ontologyDApiWrapper/#utils","text":"Type: ontologyDApi.client.api.utils","title":"utils"},{"location":"page/apiRef/originalAssets/","text":"NOTE: This type is not export from the module. Please use the exported constants as transfer method's parameter. Constructor constructor(name) Parameters name - String : One of the ontology original assets name: 'ONT' or 'ONG'. Property name Type: String Description: Original assets name passed by constructor.","title":"OriginalAssets"},{"location":"page/apiRef/originalAssets/#constructor","text":"constructor(name) Parameters name - String : One of the ontology original assets name: 'ONT' or 'ONG'.","title":"Constructor"},{"location":"page/apiRef/originalAssets/#property","text":"","title":"Property"},{"location":"page/apiRef/originalAssets/#name","text":"Type: String Description: Original assets name passed by constructor.","title":"name"}]}