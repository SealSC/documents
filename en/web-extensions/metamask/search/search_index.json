{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This document is for sealsc-web-extension-metamask project. sealsc-web-extension-metamask is a wrapper of MetaMask web extension. This wrapper is conform Seal SC web extension protocol .","title":"Getting started"},{"location":"page/apiRef/extensionActions/","text":"Extends ExtensionActions Constructor constructor(extension) Parameter extension - MetamaskExtension Property extension Type: MetamaskWrapper Description: Metamask wrapper instance passed by constructor. Methods loadContract async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Array : ABI Array of Ethereum smart contract. address - String : Smart contract Address. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if Status is SUCCESS . transfer async transfer(to, amount, memo, extra) Description Transfer ETH. Parameters : to - String : Transfer target address. amount - Number : How many ETH will be transferred. memo - String : Input data of the Transaction on Ethereum. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS . transferToken async transferToken(wrapper, to, amount, extra) Description Transfercontract based token, such as ERC 20 token. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number How many tokens will be transferred. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS . getAccount async getAccount() Description Get selected account in MetaMask. Returns : Promise Result String , Status : Account string will be set into the data field of Result if Status is SUCCESS .","title":"MetamaskActions"},{"location":"page/apiRef/extensionActions/#extends","text":"ExtensionActions","title":"Extends"},{"location":"page/apiRef/extensionActions/#constructor","text":"constructor(extension) Parameter extension - MetamaskExtension","title":"Constructor"},{"location":"page/apiRef/extensionActions/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionActions/#extension","text":"Type: MetamaskWrapper Description: Metamask wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionActions/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionActions/#loadcontract","text":"async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Array : ABI Array of Ethereum smart contract. address - String : Smart contract Address. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if Status is SUCCESS .","title":"loadContract"},{"location":"page/apiRef/extensionActions/#transfer","text":"async transfer(to, amount, memo, extra) Description Transfer ETH. Parameters : to - String : Transfer target address. amount - Number : How many ETH will be transferred. memo - String : Input data of the Transaction on Ethereum. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS .","title":"transfer"},{"location":"page/apiRef/extensionActions/#transfertoken","text":"async transferToken(wrapper, to, amount, extra) Description Transfercontract based token, such as ERC 20 token. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number How many tokens will be transferred. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if Status is SUCCESS .","title":"transferToken"},{"location":"page/apiRef/extensionActions/#getaccount","text":"async getAccount() Description Get selected account in MetaMask. Returns : Promise Result String , Status : Account string will be set into the data field of Result if Status is SUCCESS .","title":"getAccount"},{"location":"page/apiRef/extensionChecker/","text":"Extends ExtensionActions Constructor constructor(extension) Parameter extension - MetamaskExtension Property extension Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor. Methods installed async installed() Description Check if MetaMask web extension was installed. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if MetaMask installed. isMainnet async isMainnet() Description Check if the connected network of MetaMask is mainnet. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if MetaMask connected to Ethereum mainnet. isLogin async isLogin() Description Check if MetaMask is logged in. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if MetaMask was login.","title":"MetamaskChecker"},{"location":"page/apiRef/extensionChecker/#extends","text":"ExtensionActions","title":"Extends"},{"location":"page/apiRef/extensionChecker/#constructor","text":"constructor(extension) Parameter extension - MetamaskExtension","title":"Constructor"},{"location":"page/apiRef/extensionChecker/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionChecker/#extension","text":"Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionChecker/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionChecker/#installed","text":"async installed() Description Check if MetaMask web extension was installed. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if MetaMask installed.","title":"installed"},{"location":"page/apiRef/extensionChecker/#ismainnet","text":"async isMainnet() Description Check if the connected network of MetaMask is mainnet. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if MetaMask connected to Ethereum mainnet.","title":"isMainnet"},{"location":"page/apiRef/extensionChecker/#islogin","text":"async isLogin() Description Check if MetaMask is logged in. Returns : Promise Result Bool , Status : If Status is SUCCESS , the data field of Result will be true if MetaMask was login.","title":"isLogin"},{"location":"page/apiRef/extensionConnector/","text":"Extends ExtensionConnector Constructor constructor(extension) Parameter extension - MetamaskExtension Property extension Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor. Methods link async link() Description Connect user to the MetaMask. This method will call out MetaMask if user are not connected to it. This is useful when MetaMask is not logged in. Returns : Promise Result String , Status : Selected account in MetaMask will be set into the data field of Result if link successfully. unlink async unlink() Description Disconnect user and MetaMask. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if unlink successfully.","title":"MetamaskConnector"},{"location":"page/apiRef/extensionConnector/#extends","text":"ExtensionConnector","title":"Extends"},{"location":"page/apiRef/extensionConnector/#constructor","text":"constructor(extension) Parameter extension - MetamaskExtension","title":"Constructor"},{"location":"page/apiRef/extensionConnector/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionConnector/#extension","text":"Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionConnector/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionConnector/#link","text":"async link() Description Connect user to the MetaMask. This method will call out MetaMask if user are not connected to it. This is useful when MetaMask is not logged in. Returns : Promise Result String , Status : Selected account in MetaMask will be set into the data field of Result if link successfully.","title":"link"},{"location":"page/apiRef/extensionConnector/#unlink","text":"async unlink() Description Disconnect user and MetaMask. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if unlink successfully.","title":"unlink"},{"location":"page/apiRef/extensionContractCaller/","text":"Extends ExtensionContractCaller Constructor constructor(extension) Parameter extension - MetamaskExtension Property extension Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor. Methods onChainCall async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method. This method may change the mart contract state. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. amount - Number : How much ETH will send to the contract in this call. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if contract called successfully. offChainCall async offChainCall(wrapper, method, param) Description Call smart contract and get the output or result whithout change the state of it. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if contract called successfully.","title":"MetamaskContractCaller"},{"location":"page/apiRef/extensionContractCaller/#extends","text":"ExtensionContractCaller","title":"Extends"},{"location":"page/apiRef/extensionContractCaller/#constructor","text":"constructor(extension) Parameter extension - MetamaskExtension","title":"Constructor"},{"location":"page/apiRef/extensionContractCaller/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionContractCaller/#extension","text":"Type: MetamaskExtension Description: Metamask wrapper instance passed by constructor.","title":"extension"},{"location":"page/apiRef/extensionContractCaller/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionContractCaller/#onchaincall","text":"async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method. This method may change the mart contract state. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. amount - Number : How much ETH will send to the contract in this call. extra - TransactionExtraInfo : Transaction extra data, such as gas, gas limit etc. Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if contract called successfully.","title":"onChainCall"},{"location":"page/apiRef/extensionContractCaller/#offchaincall","text":"async offChainCall(wrapper, method, param) Description Call smart contract and get the output or result whithout change the state of it. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if contract called successfully.","title":"offChainCall"},{"location":"page/apiRef/extensionWrapper/","text":"Extends ExtensionWrapper Constructor constructor() Property checker Type: MetamaskChecker Description: Provide some basic check function such as isLogin, isMainnet etc. connector Type: MetamaskConnector Description: Provide connection capability to the web extension. contractCaller Type: MetamaskContractCaller Description: Provide smart contract invoke and read capability. actions Type: MetamaskActions Description: Provide sets of functions to access Ethereum, such as transfer, getAccount. webjsInstance Type: Web3 Description: A Web3 instance. Methods load async load() Description Load Web3 instance to webjsInstance property. Returns : Promise Result Web3 , Status : A Web3 instance will be set into the data field of Result if success.","title":"MetamaskExtension"},{"location":"page/apiRef/extensionWrapper/#extends","text":"ExtensionWrapper","title":"Extends"},{"location":"page/apiRef/extensionWrapper/#constructor","text":"constructor()","title":"Constructor"},{"location":"page/apiRef/extensionWrapper/#property","text":"","title":"Property"},{"location":"page/apiRef/extensionWrapper/#checker","text":"Type: MetamaskChecker Description: Provide some basic check function such as isLogin, isMainnet etc.","title":"checker"},{"location":"page/apiRef/extensionWrapper/#connector","text":"Type: MetamaskConnector Description: Provide connection capability to the web extension.","title":"connector"},{"location":"page/apiRef/extensionWrapper/#contractcaller","text":"Type: MetamaskContractCaller Description: Provide smart contract invoke and read capability.","title":"contractCaller"},{"location":"page/apiRef/extensionWrapper/#actions","text":"Type: MetamaskActions Description: Provide sets of functions to access Ethereum, such as transfer, getAccount.","title":"actions"},{"location":"page/apiRef/extensionWrapper/#webjsinstance","text":"Type: Web3 Description: A Web3 instance.","title":"webjsInstance"},{"location":"page/apiRef/extensionWrapper/#methods","text":"","title":"Methods"},{"location":"page/apiRef/extensionWrapper/#load","text":"async load() Description Load Web3 instance to webjsInstance property. Returns : Promise Result Web3 , Status : A Web3 instance will be set into the data field of Result if success.","title":"load"},{"location":"page/apiRef/transactionExtraInfo/","text":"Constructor function TransactionExtraInfo(gasPrice, gasLimit) Parameter gasPrice - String The gas price for the transaction. gasLimit - String The gas limit for the transaction. Property gasPrice Type: String Description: gas price passed by constructor. gasLimit Type: String Description: gas limit passed by constructor.","title":"TransactionExtraInfo"},{"location":"page/apiRef/transactionExtraInfo/#constructor","text":"function TransactionExtraInfo(gasPrice, gasLimit) Parameter gasPrice - String The gas price for the transaction. gasLimit - String The gas limit for the transaction.","title":"Constructor"},{"location":"page/apiRef/transactionExtraInfo/#property","text":"","title":"Property"},{"location":"page/apiRef/transactionExtraInfo/#gasprice","text":"Type: String Description: gas price passed by constructor.","title":"gasPrice"},{"location":"page/apiRef/transactionExtraInfo/#gaslimit","text":"Type: String Description: gas limit passed by constructor.","title":"gasLimit"}]}