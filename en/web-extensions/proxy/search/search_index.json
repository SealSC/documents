{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This document is for sealsc-web-extension-proxy project. sealsc-web-extension-proxy provides a class of extension proxy and a loader for this class. This proxy is an extension loader and actions gateway that provides a simpler, uniform extension call.","title":"Getting started"},{"location":"page/extensionProxy/","text":"Attention: This Class was not exported from the module. You must use module method load to get an instance. Constructor constructor() Property extension Type: ExtensionWrapper Description: ExtensionWrapper instance, transfer by module method load status Type: Status Description: Proxy status. Methods link async link(param) Description Connect user to the extension. Parameters : param - Any : Additional data required by extension. Returns : Promise Result String , Status : Account loaded in the extension will be set into the data field of Result if success. unlink async unlink() Description Disconnect user from the web extension. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success. isLogin async isLogin() Description Check if extension is logged in. extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success. isMainnet async isMainnet() Description Check if extension's network is on mainnet. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success. onChainCall async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method to do some operation on blockchain. This method may change the state of blockchain. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. amount - Number : How much original token will send to the contract in this call. extra - Any : Additional data required by extension. Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if success. offChainCall async offChainCall(wrapper, method, param) Description Disconnect user and the web extension. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if success. loadContract async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Any : Contract ABI Array, Object or any other types required by the blockchain. address - String : Contract Address passed by the constructor. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if success. transfer async transfer(to, amount, memo, extra) Description Transfer original token of the block. Original token is the base assets of a blockchain, like ETH on Ethereum. Parameters : to - String : Assets transfer target address. amount - Number : How many tokens will be transferred. memo - String : Transaction's memo. extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if success. transferToken async transferToken(wrapper, to, amount, extra) Description Transfer contract based token. These tokens are issued by smart contract, like ERC 20 token etc. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number | String : How many tokens will be transferred. Some of the blockchain accept number with token symbol in the amount string, like \"1.000 EOS\". extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if success. getAccount async getAccount() Description Get the account loaded in extension. Returns : Promise Result ContractWrapper , Status : Account string will be set into the data field of Result if success.","title":"ExtensionProxy"},{"location":"page/extensionProxy/#constructor","text":"constructor()","title":"Constructor"},{"location":"page/extensionProxy/#property","text":"","title":"Property"},{"location":"page/extensionProxy/#extension","text":"Type: ExtensionWrapper Description: ExtensionWrapper instance, transfer by module method load","title":"extension"},{"location":"page/extensionProxy/#status","text":"Type: Status Description: Proxy status.","title":"status"},{"location":"page/extensionProxy/#methods","text":"","title":"Methods"},{"location":"page/extensionProxy/#link","text":"async link(param) Description Connect user to the extension. Parameters : param - Any : Additional data required by extension. Returns : Promise Result String , Status : Account loaded in the extension will be set into the data field of Result if success.","title":"link"},{"location":"page/extensionProxy/#unlink","text":"async unlink() Description Disconnect user from the web extension. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success.","title":"unlink"},{"location":"page/extensionProxy/#islogin","text":"async isLogin() Description Check if extension is logged in. extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success.","title":"isLogin"},{"location":"page/extensionProxy/#ismainnet","text":"async isMainnet() Description Check if extension's network is on mainnet. Returns : Promise Result Bool , Status : Boolean value true will be set into the data field of Result if success.","title":"isMainnet"},{"location":"page/extensionProxy/#onchaincall","text":"async onChainCall(wrapper, method, param, amount, extra) Description Invoke a smart contract's method to do some operation on blockchain. This method may change the state of blockchain. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. amount - Number : How much original token will send to the contract in this call. extra - Any : Additional data required by extension. Returns : Promise Result String , Status : Transaction hash will be set into the data field of Result if success.","title":"onChainCall"},{"location":"page/extensionProxy/#offchaincall","text":"async offChainCall(wrapper, method, param) Description Disconnect user and the web extension. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. method - String : Which method in the contract will be called. param - Any : Data for the contract method's parameter. Returns : Promise Result Any , Status : Value returned by the contract will be set into the data field of Result if success.","title":"offChainCall"},{"location":"page/extensionProxy/#loadcontract","text":"async loacContract(abi, address) Description Load smart contract to a ContractWrapper instance. Parameters : abi - Any : Contract ABI Array, Object or any other types required by the blockchain. address - String : Contract Address passed by the constructor. Returns : Promise Result ContractWrapper , Status : ContractWrapper instance will be set into the data field of Result if success.","title":"loadContract"},{"location":"page/extensionProxy/#transfer","text":"async transfer(to, amount, memo, extra) Description Transfer original token of the block. Original token is the base assets of a blockchain, like ETH on Ethereum. Parameters : to - String : Assets transfer target address. amount - Number : How many tokens will be transferred. memo - String : Transaction's memo. extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if success.","title":"transfer"},{"location":"page/extensionProxy/#transfertoken","text":"async transferToken(wrapper, to, amount, extra) Description Transfer contract based token. These tokens are issued by smart contract, like ERC 20 token etc. Parameters : wrapper - ContractWrapper : A ContractWrapper instance returned by loadContract method. to - String : Token transfer target address. amount - Number | String : How many tokens will be transferred. Some of the blockchain accept number with token symbol in the amount string, like \"1.000 EOS\". extra - Any : Additional data to accommodate the transaction requirements of different blockchains. Returns : Promise Result ContractWrapper , Status : Transaction hash will be set into the data field of Result if success.","title":"transferToken"},{"location":"page/extensionProxy/#getaccount","text":"async getAccount() Description Get the account loaded in extension. Returns : Promise Result ContractWrapper , Status : Account string will be set into the data field of Result if success.","title":"getAccount"},{"location":"page/loader/","text":"module method load async load(extension, extra) Description Load extension to proxy. Parameters : extension - ExtensionWrapper : ExtensionWrapper instance to load. extra - Any : Config data required by extension. Returns : Promise Result ExtensionProxy , Status : ExtensionProxy instance will be set into the data field of Result if success.","title":"Loader"},{"location":"page/loader/#module-method","text":"","title":"module method"},{"location":"page/loader/#load","text":"async load(extension, extra) Description Load extension to proxy. Parameters : extension - ExtensionWrapper : ExtensionWrapper instance to load. extra - Any : Config data required by extension. Returns : Promise Result ExtensionProxy , Status : ExtensionProxy instance will be set into the data field of Result if success.","title":"load"},{"location":"page/usage/","text":"Example //this is an example of MetaMask web extension. .... !--import basic data of Ethereum contract, include abi contract address.-- script src= eth-contract.js /script !--import ExtensionProxy-- script src= sealsc-web-extension-proxy.js /script !--import MetaMask wrapper which conform Seal SC web extension protocol-- script src= ./sealsc-web-extension/sealsc-web-extension-metamask.js /script .... async function loadAndTest() { //load MetaMask wrapper to proxy metamaskProxy = await sealscWebExtensionProxy .load(sealscWebExtensionMetamask.metamask) .then(p= p.data) //do the test proxyTest(metamaskProxy, { receiver: A Ethereum address to receive test tokens. , contractData: { abi: ethAbi, address: ethContractAddress, }, transferData: { amount: 1, memo: '', extra: null }, transferTokenData: { amount: 1.2 }, offChainData: { method: decimals } }) } } async function proxyTest(proxy, data) { let receiver = data.receiver let contractData = data.contractData let transferData = data.transferData let transferTokenData = data.transferTokenData let offChainData = data.offChainData let loginCheck = await proxy.isLogin() console.log( login: , loginCheck) if(!loginCheck.data) { let link = await proxy.link() console.log( link: , link) if(!link.data) { console.log( need login ) return } } let transferResult = await proxy.transfer(receiver, transferData.amount, transferData.memo, transferData.extra) console.log( transfer: , transferResult) let contractLoadResult = await proxy.loadContract(contractData.abi, contractData.address) console.log( contract: , contractLoadResult) if(!contractLoadResult.data) { console.log( contract load failed ) return } let contractWrapper = contractLoadResult.data let transferTokenResult = await proxy.transferToken(contractWrapper, receiver, transferTokenData.amount, transferTokenData.extra) console.log( transfer token: , transferTokenResult) let offChainCallResult = await proxy.offChainCall(contractWrapper, offChainData.method) console.log( off chain call: , offChainCallResult) } This example is using MetaMask Wrapper sealsc-web-extension-metamask .","title":"Usage"},{"location":"page/usage/#example","text":"//this is an example of MetaMask web extension. .... !--import basic data of Ethereum contract, include abi contract address.-- script src= eth-contract.js /script !--import ExtensionProxy-- script src= sealsc-web-extension-proxy.js /script !--import MetaMask wrapper which conform Seal SC web extension protocol-- script src= ./sealsc-web-extension/sealsc-web-extension-metamask.js /script .... async function loadAndTest() { //load MetaMask wrapper to proxy metamaskProxy = await sealscWebExtensionProxy .load(sealscWebExtensionMetamask.metamask) .then(p= p.data) //do the test proxyTest(metamaskProxy, { receiver: A Ethereum address to receive test tokens. , contractData: { abi: ethAbi, address: ethContractAddress, }, transferData: { amount: 1, memo: '', extra: null }, transferTokenData: { amount: 1.2 }, offChainData: { method: decimals } }) } } async function proxyTest(proxy, data) { let receiver = data.receiver let contractData = data.contractData let transferData = data.transferData let transferTokenData = data.transferTokenData let offChainData = data.offChainData let loginCheck = await proxy.isLogin() console.log( login: , loginCheck) if(!loginCheck.data) { let link = await proxy.link() console.log( link: , link) if(!link.data) { console.log( need login ) return } } let transferResult = await proxy.transfer(receiver, transferData.amount, transferData.memo, transferData.extra) console.log( transfer: , transferResult) let contractLoadResult = await proxy.loadContract(contractData.abi, contractData.address) console.log( contract: , contractLoadResult) if(!contractLoadResult.data) { console.log( contract load failed ) return } let contractWrapper = contractLoadResult.data let transferTokenResult = await proxy.transferToken(contractWrapper, receiver, transferTokenData.amount, transferTokenData.extra) console.log( transfer token: , transferTokenResult) let offChainCallResult = await proxy.offChainCall(contractWrapper, offChainData.method) console.log( off chain call: , offChainCallResult) } This example is using MetaMask Wrapper sealsc-web-extension-metamask .","title":"Example"}]}